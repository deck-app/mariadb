name: MariaDB

on:
  schedule:
  - cron:  '30 22 * * *'
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  MariaDB-AMD64:
    strategy:
      matrix:
        mv: ["10.7", "10.6", "10.5"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: docker compose install
        run: |
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      - name: Build the Docker image Mariadb ${{ matrix.mv }}
        run: docker-compose -f "docker-compose.yml" up -d --build
        env:
          DB_ROOT_PASSWORD: password
          DB_PASSWORD: password
          DB_USER: admin
          DB_NAME:  test
          MARIADB_VERSION: ${{ matrix.mv }}
          DATA_PATH_HOST: /tmp/db
      - name: image name 
        run: docker image ls
      - name: Verify MariaDB running from host, create Database and show Database
        run: |
          while ! docker exec mariadb_mariadb_1 mysqladmin --user=root --password=password --host "mariadb" ping --silent &> /dev/null ; do
              echo "Waiting for database connection..."
              sleep 2
          done
      - name: Check MariaDB version
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "SHOW VARIABLES LIKE '%version%';"
      - name: Verify MariaDB database from user
        run:  docker exec mariadb_mariadb_1 mysql -uadmin -ppassword -e "SHOW DATABASES"
      - name: Create a Database
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "CREATE DATABASE deckapp"
      - name: Verify Database create or not
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "SHOW DATABASES"
      - name: Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: mariadb:10.7
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Docker Image Down and data deleted
        run:  |
          docker-compose -f "docker-compose.yml" down
          sudo rm -rf /tmp/db
          echo "y" | docker image prune -a
          echo "y" | docker volume prune
      - name: Create ENV
        env:
          ENV_TEST: ${{ secrets.ENV_TEST }}
        run: |
          echo "$ENV_TEST" > .env.test
        shell: bash
      - name: Notify on SUCCESS
        if: ${{ SUCCESS() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "{emoji} *{job}* has {status_message}"
          message_format: "*{workflow}* {status_message} in <{branch_url}|{branch}> Architecture <{run_url}|{job}> Approved by ${{ github.event.head_commit.author.name }}"
          footer: "Linked Repo <{repo_url}|{repo}>" 
          mention_users: "D056LFW47NF,"
          mention_users_when: "SUCCESS"
          mention_groups: "C06H0SB11JL"
          mention_groups_when: "SUCCESS"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SUCCESS }}
      - name: Notify on FAIL
        if: ${{ failure() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "{emoji} *{job}* has {status_message}"
          message_format: "*{workflow}* {status_message} in <{branch_url}|{branch}> Architecture <{run_url}|{job}> Approved by ${{ github.event.head_commit.author.name }}"
          footer: "Linked Repo <{repo_url}|{repo}>"
          mention_users: "D056LFW47NF"
          mention_users_when: "failure,warnings"
          mention_groups: "C06G95T1YH3"
          mention_groups_when: "failure,warnings"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_FAIL }}
  MariaDB-ARM64:
    strategy:
      matrix:
        mv: ["10.7", "10.6", "10.5"]
    runs-on: ubuntu-22.04
    name: MariaDB-ARM64
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
      - name: Get the output
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
      - name: Build the Docker image Mariadb ${{ matrix.mv }}
        run: docker-compose -f "docker-compose.yml" up -d --build
        env:
          DB_ROOT_PASSWORD: password
          DB_PASSWORD: password
          DB_USER: admin
          DB_NAME:  test
          MARIADB_VERSION: ${{ matrix.mv }}
          DATA_PATH_HOST: /tmp/db
      - name: Verify MariaDB running from host, create Database and show Database
        run: |
          while ! docker exec mariadb_mariadb_1 mysqladmin --user=root --password=password --host "mariadb" ping --silent &> /dev/null ; do
              echo "Waiting for database connection..."
              sleep 2
          done
      - name: Check MariaDB version
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "SHOW VARIABLES LIKE '%version%';"
      - name: Verify MariaDB database from user
        run:  docker exec mariadb_mariadb_1 mysql -uadmin -ppassword -e "SHOW DATABASES"
      - name: Create a Database
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "CREATE DATABASE deckapp"
      - name: Verify Database create or not
        run:  docker exec mariadb_mariadb_1 mysql -uroot -ppassword -e "SHOW DATABASES"
      - name: Docker Image Down and data deleted
        run:  |
          docker-compose -f "docker-compose.yml" down
          sudo rm -rf /tmp/db
          echo "y" | docker image prune -a
          echo "y" | docker volume prune
      - name: Create ENV
        env:
          ENV_TEST: ${{ secrets.ENV_TEST }}
        run: |
          echo "$ENV_TEST" > .env.test
        shell: bash
      - name: Notify on SUCCESS
        if: ${{ SUCCESS() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "{emoji} *{job}* has {status_message}"
          message_format: "*{workflow}* {status_message} in <{branch_url}|{branch}> Architecture <{run_url}|{job}> Approved by ${{ github.event.head_commit.author.name }}"
          footer: "Linked Repo <{repo_url}|{repo}>" 
          mention_users: "D056LFW47NF,"
          mention_users_when: "SUCCESS"
          mention_groups: "C06H0SB11JL"
          mention_groups_when: "SUCCESS"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_SUCCESS }}
      - name: Notify on FAIL
        if: ${{ failure() }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notification_title: "{emoji} *{job}* has {status_message}"
          message_format: "*{workflow}* {status_message} in <{branch_url}|{branch}> Architecture <{run_url}|{job}> Approved by ${{ github.event.head_commit.author.name }}"
          footer: "Linked Repo <{repo_url}|{repo}>"
          mention_users: "D056LFW47NF"
          mention_users_when: "failure,warnings"
          mention_groups: "C06G95T1YH3"
          mention_groups_when: "failure,warnings"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_FAIL }}
